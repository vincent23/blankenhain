cmake_minimum_required(VERSION 3.6)
project(libblankenhain)

# utility
function(prepend var prefix)
	set(stringsWithPrefix "")
	foreach(x ${ARGN})
		list(APPEND stringsWithPrefix "${prefix}/${x}")
	endforeach(x)
	set(${var} "${stringsWithPrefix}" PARENT_SCOPE)
endfunction(prepend)

prepend(HEADERS "include/"
	"AlignedType.h"
	"AuxFunc.h"
	"Basedrum1Instrument.h"
	"BitcrushEffect.h"
	"CircularBuffer.h"
	"CompressorEffect.h"
	"Constants.h"
	"DelayEffect.h"
	"DistortionEffect.h"
	"EffectBase.h"
	"EnvelopeFollower.h"
	"EqualizerEffect.h"
	"ExampleEffect.h"
	"ExampleInstrument.h"
	"Filter.h"
	"FilterEffect.h"
	"FloatParameter.h"
	"FmInstrument.h"
	"freeverbEffect.h"
	"glidePolyblepInstrument.h"
	"gmSoundRegion.h"
	"gmInstrument.h"
	"gmSound.h"
	"gmsynthInstrument.h"
	"InstrumentBase.h"
	"InterpolatedValue.h"
	"MidiBase.h"
	"MidiEvent.h"
	"ModulationEnvelope.h"
	"NormalizedRange.h"
	"OnePoleFilter.h"
	"Oscillators.h"
	"PanEffect.h"
	"ParameterBundle.h"
	"pitchshiftMidiEffect.h"
	"polyblepInstrument.h"
	"RhythmgateEffect.h"
	"Sample.h"
	"SoundFonts.h"
	"UpDownSampling.h"
	"VibratoEffect.h"
	"VoiceState.h"
	"VolumeEffect.h"
	"warnings.h"
	"WavetableInstrument.h"
)

prepend(SOURCES "src/"
	"AlignedType.cpp"
	"AuxFunc.cpp"
	"Basedrum1Instrument.cpp"
	"BitcrushEffect.cpp"
	"CircularBuffer.cpp"
	"CompressorEffect.cpp"
	"DelayEffect.cpp"
	"DistortionEffect.cpp"
	"EffectBase.cpp"
	"EnvelopeFollower.cpp"
	"EqualizerEffect.cpp"
	"ExampleEffect.cpp"
	"ExampleInstrument.cpp"
	"Filter.cpp"
	"FilterEffect.cpp"
	"FloatParameter.cpp"
	"FmInstrument.cpp"
	"freeverbEffect.cpp"
	"glidePolyblepInstrument.cpp"
	"gmInstrument.cpp"
	"gmSound.cpp"
	"gmsynthInstrument.cpp"
	"InstrumentBase.cpp"
	"InterpolatedValue.cpp"
	"NormalizedRange.cpp"
	"OnePoleFilter.cpp"
	"Oscillators.cpp"
	"PanEffect.cpp"
	"ParameterBundle.cpp"
	"pitchshiftMidiEffect.cpp"
	"polyblepInstrument.cpp"
	"RhythmgateEffect.cpp"
	"UpDownSampling.cpp"
	"VibratoEffect.cpp"
	"VoiceState.cpp"
	"VolumeEffect.cpp"
	"WavetableInstrument.cpp"
)

include_directories("include")
add_library(libblankenhain STATIC ${HEADERS} ${SOURCES})
